/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.ijse.layered.view;

import edu.ijse.layered.controller.CustomerController;
import edu.ijse.layered.controller.ReservationsController;
import edu.ijse.layered.controller.RoomController;
import edu.ijse.layered.dto.CustomerDto;
import edu.ijse.layered.dto.ReservationsDto;
import edu.ijse.layered.dto.RoomsDto;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Home
 */
public class ReservationsView extends javax.swing.JFrame {

    private ReservationsController reservationsController;
    private CustomerController customerController;
    private RoomController roomsController;

    /**
     * Creates new form ReservationsView
     */
    public ReservationsView() {
        reservationsController = new ReservationsController();
        customerController = new CustomerController();
        roomsController = new RoomController();
        initComponents();
        loadReservations();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCheckOut = new javax.swing.JLabel();
        lblResID = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lblCustID = new javax.swing.JLabel();
        txtResID = new javax.swing.JTextField();
        lblRoomId = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblReservatons = new javax.swing.JTable();
        lblCheckIn = new javax.swing.JLabel();
        txtCheckOut = new javax.swing.JTextField();
        txtCustID = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtRoomId = new javax.swing.JTextField();
        txtCheckIn = new javax.swing.JTextField();
        btnNewReservationsView = new javax.swing.JButton();
        lblTitleRes = new javax.swing.JLabel();
        lblPkg = new javax.swing.JLabel();
        lblAmmont = new javax.swing.JLabel();
        txtAmount = new javax.swing.JTextField();
        lblCustVal = new javax.swing.JLabel();
        lblRoomVal = new javax.swing.JLabel();
        txtPkg = new javax.swing.JTextField();
        btnCustomersView = new javax.swing.JButton();
        btnCatagoriesView = new javax.swing.JButton();
        btnRoomsView = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Reservations"); // NOI18N

        lblCheckOut.setText("Check-OUT");

        lblResID.setText("Reservation ID");

        lblCustID.setText("Customer ID");

        lblRoomId.setText("Room ID");

        tblReservatons.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblReservatons.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblReservatonsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblReservatons);

        lblCheckIn.setText("Check-IN");

        btnUpdate.setText("Update");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnNewReservationsView.setText("New");
        btnNewReservationsView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewReservationsViewActionPerformed(evt);
            }
        });

        lblTitleRes.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblTitleRes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitleRes.setText("Manage Reservations");

        lblPkg.setText("Package");

        lblAmmont.setText("Amount");

        lblCustVal.setText("  ");

        lblRoomVal.setText("  ");

        txtPkg.setEditable(false);
        txtPkg.setText("  ");
        txtPkg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPkgActionPerformed(evt);
            }
        });

        btnCustomersView.setText("Customers");
        btnCustomersView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCustomersViewActionPerformed(evt);
            }
        });

        btnCatagoriesView.setText("Catagories");
        btnCatagoriesView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCatagoriesViewActionPerformed(evt);
            }
        });

        btnRoomsView.setText("Rooms");
        btnRoomsView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRoomsViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitleRes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblAmmont)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblResID)
                            .addComponent(lblRoomId)
                            .addComponent(lblCheckIn)
                            .addComponent(lblCheckOut)
                            .addComponent(lblCustID)
                            .addComponent(lblPkg))
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCheckIn, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                                    .addComponent(txtRoomId)
                                    .addComponent(txtResID)
                                    .addComponent(txtCheckOut, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtPkg)
                                    .addComponent(txtCustID))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCustVal, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblRoomVal, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(59, 59, 59)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnRoomsView, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnCustomersView, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                                        .addComponent(btnNewReservationsView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnCatagoriesView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(5, 5, 5))))
                    .addComponent(jScrollPane1))
                .addGap(8, 8, 8))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(243, 243, 243))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblTitleRes, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblResID)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtResID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnNewReservationsView))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCustID)
                            .addComponent(txtCustID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCustVal)
                            .addComponent(btnCustomersView))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRoomId)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtRoomId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblRoomVal))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCheckIn))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCheckOut))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPkg)
                            .addComponent(txtPkg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(btnCatagoriesView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRoomsView)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAmmont)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addGap(11, 11, 11))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblReservatonsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblReservatonsMouseClicked
        searchReservations();
    }//GEN-LAST:event_tblReservatonsMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        updateReservations();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        deleteReservations();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnNewReservationsViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewReservationsViewActionPerformed
        createReservationsWindow();//New method created
    }//GEN-LAST:event_btnNewReservationsViewActionPerformed

    private void txtPkgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPkgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPkgActionPerformed

    private void btnCustomersViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCustomersViewActionPerformed
        new CustomerView().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnCustomersViewActionPerformed

    private void btnCatagoriesViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCatagoriesViewActionPerformed
        new RoomCatagoriesView().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnCatagoriesViewActionPerformed

    private void btnRoomsViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRoomsViewActionPerformed
        new RoomsView().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnRoomsViewActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ReservationsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ReservationsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ReservationsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ReservationsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ReservationsView().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCatagoriesView;
    private javax.swing.JButton btnCustomersView;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNewReservationsView;
    private javax.swing.JButton btnRoomsView;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblAmmont;
    private javax.swing.JLabel lblCheckIn;
    private javax.swing.JLabel lblCheckOut;
    private javax.swing.JLabel lblCustID;
    private javax.swing.JLabel lblCustVal;
    private javax.swing.JLabel lblPkg;
    private javax.swing.JLabel lblResID;
    private javax.swing.JLabel lblRoomId;
    private javax.swing.JLabel lblRoomVal;
    private javax.swing.JLabel lblTitleRes;
    private javax.swing.JTable tblReservatons;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtCheckIn;
    private javax.swing.JTextField txtCheckOut;
    private javax.swing.JTextField txtCustID;
    private javax.swing.JTextField txtPkg;
    private javax.swing.JTextField txtResID;
    private javax.swing.JTextField txtRoomId;
    // End of variables declaration//GEN-END:variables

    private void clear() {
        txtResID.setText("");
        txtCustID.setText("");
        txtRoomId.setText("");
        txtCheckIn.setText("");
        txtCheckOut.setText("");
        txtPkg.setText("");
        txtAmount.setText("");
    }

    private void loadReservations() {
        try {
            String[] columns = {"Reservation Id", "customer_id", "Room ID", "Res Date", "CheckIN",
                "Check Out", "Package", "Ammount"};
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            tblReservatons.setModel(dtm);

            List<ReservationsDto> reservationsDtos = reservationsController.getAllReservations();
            for (ReservationsDto reservationsDto : reservationsDtos) {
                Object[] rowData = {reservationsDto.getReservationsID(),
                    reservationsDto.getCustomerID(),
                    reservationsDto.getRoomID(),
                    reservationsDto.getReservationsDate(),
                    reservationsDto.getCheckInDate(),
                    reservationsDto.getCheckOutDate(),
                    reservationsDto.getResPackage(),
                    reservationsDto.getResAmount()};
                dtm.addRow(rowData);

            }
        } catch (Exception ex) {
            Logger.getLogger(RoomCatagoriesView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

    }

    private void saveReservations() {
        ReservationsDto reservationsDto = new ReservationsDto();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        reservationsDto.setReservationsID(Integer.parseInt(txtResID.getText()));
        reservationsDto.setCustomerID(Integer.parseInt(txtCustID.getText()));
        //   reservationsDto.setCustomerID(Integer.parseInt((String) comboCustomer.getSelectedItem()));
        reservationsDto.setRoomID(Integer.parseInt(txtRoomId.getText()));
        //   reservationsDto.setRoomID(Integer.parseInt((String) comboRoom.getSelectedItem()));
        reservationsDto.setReservationsDate(sdf.format(new Date()));
        reservationsDto.setCheckInDate(txtCheckIn.getText());
        reservationsDto.setCheckOutDate(txtCheckOut.getText());
        //reservationsDto.setResPackage((String) comboPkg.getSelectedItem());
        reservationsDto.setResPackage(txtPkg.getText());
        reservationsDto.setResAmount(Double.parseDouble(txtAmount.getText()));

        try {
            String result = reservationsController.saveReservations(reservationsDto);
            JOptionPane.showMessageDialog(this, result);
            clear();
            loadReservations();
        } catch (Exception ex) {
            Logger.getLogger(ReservationsView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());

        }

    }

    private void updateReservations() {
        try {
            ReservationsDto reservationsDto = new ReservationsDto();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            reservationsDto.setReservationsID(Integer.parseInt(txtResID.getText()));
            reservationsDto.setCustomerID(Integer.parseInt(txtCustID.getText()));
            // reservationsDto.setCustomerID(Integer.parseInt((String) comboCustomer.getSelectedItem()));
            reservationsDto.setRoomID(Integer.parseInt(txtRoomId.getText()));
            // reservationsDto.setRoomID(Integer.parseInt((String) comboRoom.getSelectedItem()));
            reservationsDto.setReservationsDate(sdf.format(new Date()));
            reservationsDto.setCheckInDate(txtCheckIn.getText());
            reservationsDto.setCheckOutDate(txtCheckOut.getText());
            reservationsDto.setResPackage(txtPkg.getText());
            reservationsDto.setResAmount(Double.parseDouble(txtAmount.getText()));

            String resp = reservationsController.updateReservations(reservationsDto);
            JOptionPane.showMessageDialog(this, resp);
            loadReservations();
            clear();
        } catch (Exception ex) {
            Logger.getLogger(ReservationsView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

    }

    private void deleteReservations() {
        try {
            String reservationsID = txtResID.getText();
            String resp = reservationsController.deleteReservations(reservationsID);
            JOptionPane.showMessageDialog(this, resp);
            loadReservations();
            clear();
        } catch (Exception ex) {
            Logger.getLogger(CustomerView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

    }

    private void searchReservations() {
        String id = tblReservatons.getValueAt(tblReservatons.getSelectedRow(), 0).toString();
        try {
            ReservationsDto dto = reservationsController.getReservations(id);

            if (dto != null) {
                txtResID.setText(Integer.toString(dto.getReservationsID()));
                txtCustID.setText(Integer.toString(dto.getCustomerID()));
                txtRoomId.setText(Integer.toString(dto.getRoomID()));
                txtCheckIn.setText(dto.getCheckInDate());
                txtCheckOut.setText(dto.getCheckOutDate());
                txtPkg.setText(dto.getResPackage());
                //lblLoadPkg.setText(dto.getResPackage());
                txtAmount.setText(Double.toString(dto.getResAmount()));
                searchCustomer();
                searchRoom();

            } else {
                JOptionPane.showMessageDialog(this, "Reservation Not Found");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void searchCustomer() {
        try {
            //String custId = txtCustID.getText();
            String custId = txtCustID.getText();

            CustomerDto customerDto = customerController.getCustomer(custId);

            if (customerDto != null) {
                lblCustVal.setText(customerDto.getCustomerName());
            } else {
                JOptionPane.showMessageDialog(this, "Customer Not Found");
                lblCustVal.setText("Invalid");
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error");
            Logger.getLogger(ReservationsView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void searchRoom() {
        try {
            //String roomId = txtRoomId.getText();
            String roomId = txtRoomId.getText();
            String roomAvailable;
            RoomsDto roomsDto = roomsController.getRoom(roomId);

            if (roomsDto != null) {
                /////////////
                if (roomsDto.getRoomAvailability() == 1) {
                    roomAvailable = "Available";
                } else {
                    roomAvailable = "Reserved";
                }
                ////////////                
                lblRoomVal.setText(roomsDto.getRoomNumber() + " | " + roomAvailable);
            } else {
                JOptionPane.showMessageDialog(this, "Rooms Not Found");
                lblRoomVal.setText("Invalid");
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error");
            Logger.getLogger(ReservationsView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void createReservationsWindow() {
        new NewReservationsView().setVisible(true);
        this.setVisible(false);
    }

}
