/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.ijse.layered.view;

import edu.ijse.layered.controller.CategoryController;
import edu.ijse.layered.controller.RoomController;
import edu.ijse.layered.dto.CategoryDto;
import edu.ijse.layered.dto.RoomsDto;
import java.awt.*;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Home
 */
public class RoomsView extends javax.swing.JFrame {

    private RoomController roomController;
    private CategoryController categoryController;
    private static int flag_cat = 0;

    /**
     * Creates new form RoomsView
     */
    public RoomsView() {
        roomController = new RoomController();
        categoryController = new CategoryController();
        initComponents();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/Icon2.png")));
        this.setLocationRelativeTo(null);
        txtAV.setVisible(false);
        lblCatName.setVisible(false);
        loadRooms();
        loadLabelCategories();
        //loadComboCategories();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblRate = new javax.swing.JLabel();
        lblID = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lblCategory = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        lblRoomNum = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRooms = new javax.swing.JTable();
        lblAvailable = new javax.swing.JLabel();
        txtRate = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtRoomNum = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblAvailableState = new javax.swing.JLabel();
        txtAV = new javax.swing.JTextField();
        btnReservationsView = new javax.swing.JButton();
        btnCustomersView = new javax.swing.JButton();
        btnCatagoriesView = new javax.swing.JButton();
        lblCatName = new javax.swing.JLabel();
        txtCategory = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rooms Management");

        lblRate.setText("Rate");

        lblID.setText("Room ID");

        lblCategory.setText("Room Category");

        lblRoomNum.setText("Room Number");

        tblRooms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblRooms.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRoomsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblRooms);

        lblAvailable.setText("Availability");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setText("CREATE");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Manage Rooms");

        lblAvailableState.setText("  ");

        txtAV.setText("Availability");

        btnReservationsView.setText("Reservations");
        btnReservationsView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReservationsViewActionPerformed(evt);
            }
        });

        btnCustomersView.setText("Customers");
        btnCustomersView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCustomersViewActionPerformed(evt);
            }
        });

        btnCatagoriesView.setText("Catagories");
        btnCatagoriesView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCatagoriesViewActionPerformed(evt);
            }
        });

        lblCatName.setText("| ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblID)
                            .addComponent(lblRoomNum)
                            .addComponent(lblAvailable)
                            .addComponent(lblRate)
                            .addComponent(lblCategory))
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtRate, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtRoomNum)
                                    .addComponent(txtID)
                                    .addComponent(lblAvailableState, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                                    .addComponent(txtCategory))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(txtAV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblCatName, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnReservationsView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnCustomersView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnCatagoriesView, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDelete)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate)
                .addGap(18, 18, 18)
                .addComponent(btnSave)
                .addGap(174, 174, 174))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblID)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblCategory)
                                    .addComponent(lblCatName)
                                    .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblRoomNum)
                                .addGap(18, 18, 18)
                                .addComponent(lblAvailable))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtRoomNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblAvailableState)
                                    .addComponent(txtAV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblRate)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnReservationsView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCustomersView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCatagoriesView)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addGap(11, 11, 11))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblRoomsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRoomsMouseClicked
        searchRoom();
    }//GEN-LAST:event_tblRoomsMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        updateRoom();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        deleteRoom();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        saveRoom();//New method created
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnReservationsViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReservationsViewActionPerformed
        new ReservationsView().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnReservationsViewActionPerformed

    private void btnCustomersViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCustomersViewActionPerformed
        new CustomerView().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnCustomersViewActionPerformed

    private void btnCatagoriesViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCatagoriesViewActionPerformed
        new RoomCatagoriesView().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnCatagoriesViewActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(RoomsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(RoomsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(RoomsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(RoomsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new RoomsView().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCatagoriesView;
    private javax.swing.JButton btnCustomersView;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnReservationsView;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblAvailable;
    private javax.swing.JLabel lblAvailableState;
    private javax.swing.JLabel lblCatName;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblRate;
    private javax.swing.JLabel lblRoomNum;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblRooms;
    private javax.swing.JTextField txtAV;
    private javax.swing.JTextField txtCategory;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtRate;
    private javax.swing.JTextField txtRoomNum;
    // End of variables declaration//GEN-END:variables

    private void clear() {
        txtID.setText("");
        txtCategory.setText("");
        lblAvailableState.setText("");
        txtRoomNum.setText("");
        txtRate.setText("");
    }

    private void searchRoom() {
        String id = tblRooms.getValueAt(tblRooms.getSelectedRow(), 0).toString();

        try {
            RoomsDto roomDto = roomController.getRoom(id);

            if (roomDto != null) {
                txtID.setText(Integer.toString(roomDto.getRoomID()));
                txtCategory.setText(Integer.toString(roomDto.getRoomCatagory()));
                txtRoomNum.setText(roomDto.getRoomNumber());
                txtAV.setText(Integer.toString(roomDto.getRoomAvailability()));
                ////////////
                if (roomDto.getRoomAvailability() == 1) {
                    lblAvailableState.setText("YES");
                } else {
                    lblAvailableState.setText("NO");
                }
                ////////////
                txtRate.setText(Double.toString(roomDto.getRoomRate()));
            } else {
                JOptionPane.showMessageDialog(this, "Room Not Found");
            }
        } catch (Exception ex) {
            Logger.getLogger(RoomsView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

    }

    private void updateRoom() {

        try {
            RoomsDto roomsDto = new RoomsDto();
            roomsDto.setRoomID(Integer.parseInt(txtID.getText()));
            roomsDto.setRoomCatagory(Integer.parseInt(txtCategory.getText()));
            roomsDto.setRoomNumber(txtRoomNum.getText());
            roomsDto.setRoomRate(Double.parseDouble(txtRate.getText()));
            roomsDto.setRoomAvailability(Integer.parseInt(txtAV.getText()));

            String resp = roomController.updateRoom(roomsDto);
            JOptionPane.showMessageDialog(this, resp);
            loadRooms();
            clear();
        } catch (Exception ex) {
            Logger.getLogger(RoomsView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

    }

    private void deleteRoom() {
        try {
            String roomId = txtID.getText();
            String resp = roomController.deleteRoom(roomId);
            JOptionPane.showMessageDialog(this, resp);
            loadRooms();
            clear();
        } catch (Exception ex) {
            Logger.getLogger(RoomsView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

    }

    private void saveRoom() {
        RoomsDto roomsDto = new RoomsDto();
        roomsDto.setRoomID(Integer.parseInt(txtID.getText()));
        roomsDto.setRoomCatagory(Integer.parseInt(txtCategory.getText()));
        roomsDto.setRoomNumber(txtRoomNum.getText());
        roomsDto.setRoomRate(Double.parseDouble(txtRate.getText()));
        roomsDto.setRoomAvailability(Integer.parseInt("1"));

        try {
            String result = roomController.saveRoom(roomsDto);
            JOptionPane.showMessageDialog(this, result);
            clear();
            loadRooms();
            //loadComboCategories();
        } catch (Exception ex) {
            Logger.getLogger(RoomsView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());

        }

    }

    private void loadRooms() {
        try {
            String columns[] = {"Room ID", "Category ID", "Room Number", "Availability", "Rate"};
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };

            tblRooms.setModel(dtm);

            List<RoomsDto> roomsDtos = roomController.getAllRooms();
            for (RoomsDto roomsDto : roomsDtos) {
                Object[] rowData = {roomsDto.getRoomID(),
                    roomsDto.getRoomCatagory(),
                    roomsDto.getRoomNumber(),
                    roomsDto.getRoomAvailability(),
                    roomsDto.getRoomRate()};
                dtm.addRow(rowData);
            }
        } catch (Exception ex) {
            Logger.getLogger(RoomsView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());

        }
    }

    private void loadLabelCategories() {
        try {
            // DefaultComboBoxModel dtm = new DefaultComboBoxModel();
            List<CategoryDto> categoryDtos = categoryController.getAll();
            for (CategoryDto categoryDto : categoryDtos) {
                Integer rowData = categoryDto.getCategoryID();
                String rowName = categoryDto.getCategoryName();
                lblCatName.setText(lblCatName.getText() + Integer.toString(rowData) + "-" + rowName + " | ");
                txtCategory.setToolTipText(lblCatName.getText());
            }

        } catch (Exception ex) {
            Logger.getLogger(RoomsView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        flag_cat = 1;

    }


    /*   private void loadComboCategories() {
        comboCatagories.removeAllItems();
        try {
            // DefaultComboBoxModel dtm = new DefaultComboBoxModel();
            List<CategoryDto> categoryDtos = categoryController.getAll();
            for (CategoryDto categoryDto : categoryDtos) {
                Integer rowData = categoryDto.getCategoryID();
                String rowName = categoryDto.getCategoryName();
                comboCatagories.addItem(Integer.toString(rowData)+ " - " + rowName);
            }
         

        } catch (Exception ex) {
            Logger.getLogger(RoomsView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        flag_cat = 1 ;

    }*/
 /* private void changeLabelCategoryName(){
        if(flag_cat==1){
        try {
            //String custId = txtCustID.getText();
            String catId = (String) comboCatagories.getSelectedItem();

            CategoryDto categoryDto = categoryController.get(catId);

            if (categoryDto != null) {           
                lblCatName.setText(catId.substring(0,1));
            } else {
                JOptionPane.showMessageDialog(this, "Category Not Found");
                lblCatName.setText("Invalid");
            }
           
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error in Category");
            Logger.getLogger(RoomsView.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
    }*/
}
